"""
@author: github.com/reginaldshoe
"""
import pandas as pd
import math
from gurobipy import *

############
### Sets ###
############

nodes = pd.read_csv('nodes2.csv')
arcs = pd.read_csv('grid.csv')

A = arcs['Arc']
N = nodes['Node']

############
### Data ###
############

### Email 1 data - Generator data 

costs = { 20: 65, 45: 70, 35: 74, 37: 82}
supply = { 20: 406, 45: 838, 35: 818, 37: 654}


### Email 2 data - Transmission loss

# Loss factor (% per km)
loss = 0.001 

### Email 3 data- Transmission limits 

# Transmission maximum limit (MW)
lowlimit = 100 
# Transmission arcs with no limit
highs = [30,31,32,33,36,37,48,49,88,89,92,93,96,97,118,119,122,123]
# Calculate lengths of each line 
distance = [math.hypot(
    nodes['X'][arcs['Node1'][a]]-nodes['X'][arcs['Node2'][a]],
    nodes['Y'][arcs['Node1'][a]]-nodes['Y'][arcs['Node2'][a]]) for a in A]

### Email 4 data - demand profile across day

# Set of daily time periods
T = range(6) 
# Demand of node (tabular for each node and each time period)
D = [[nodes['D'+str(t)][n] for t in T] for n in N] 

### Email 5 - select lines for increased transmission

# Number of lines with extra transmission allowance
Num_Inc_Lines = 3 
# Extra transmission allowance(MW)
Extra_Arc_Cap = 50 

### Email 6 - Construct new gas generator

# Number of new generators to be constructed
Num_New_Generator = 1 
# Capacity of the new generator
New_Capacity = 200 
# Cost of generation for the new generator ($/MWh)
New_Cost = 78

### Email 7 - Declined generator node

Declined_node = 33

### Email 8 - Periods that the gas generator can run per day 

New_Periods = 4 

### Email 9 - Solar Farm construction

# Number of solar farm(s)
Num_Solar_Farm = 1 
# Capacity of the solar farm in different time periods 
Supply_SF = [0,20,120,110,20,0] 
# Cost of energy production at the solar farm p/MWh
Cost_SF = 42 

### Email 10 - Generator thresholds

# Threshold of generators (%) above which power production is less efficient
Cap_Threshold = 0.6 
# Cost increase (%) of power when generator production exceeds threshold
Extra_Cost = 0.3 

### Email 11 - Demand reduction arrangement

# Percentage by which the demand is reduced
Reduced_demand = 0.1 
# Number of periods that a node should reduce its demand every day
Num_Reduce_Period = 1 
# Maximum number of nodes to reduce demand in a time period
Num_Reduce_Node = 9 

###################
### Start Model ###
###################

m = Model('Sparkland')

#################
### Variables ###
#################

# X gives flow on arc a in time period t
X = {(n,t): m.addVar() for n in N for t in T}

# Y gives amount generated by generators (including the gas generator) at node n in time period t within the efficient threshold
Y = {(a,t): m.addVar() for a in A for t in T}

# I indicates whether the capacity is increased for arc a
I = {a: m.addVar(vtype=GRB.BINARY) for a in A}

# N_G indicates whether the node is chosen as a new generator
N_G = {n: m.addVar(vtype=GRB.BINARY) for n in N if n not in supply} 

# P indicates in which periods the gas generator should run
P = {t: m.addVar(vtype=GRB.BINARY) for t in T}

# S indicates whether the node is chosen to build a solar farm
S = {n: m.addVar(vtype=GRB.BINARY) for n in N}

# Z gives amount generated by the solar farm at node n in time period t
Z = {(n,t): m.addVar() for n in N for t in T}

# O indicates whether generator n is operating over 60% of its capacity in time period t
O = {(n,t): m.addVar(vtype=GRB.BINARY) for n in N for t in T}

# E gives the extra amount generated by generator n over 60% of their capacities in time period t
E = {(n,t): m.addVar() for n in N for t in T}

# R indicates whether a node reduces its demand in a time period.
R = {(n,t): m.addVar(vtype=GRB.BINARY) for n in N for t in T}

#################
### Objective ###
#################

m.setObjective(4*(quicksum(costs[n]*X[n,t] for n in costs for t in T)
                + quicksum(New_Cost*X[n,t] for n in N for t in T if n not in costs)
                + quicksum(Cost_SF*Z[n,t] for n in N for t in T)
                + quicksum(costs[n]*(1+Extra_Cost)*E[n,t] for n in costs for t in T)), GRB.MINIMIZE)

###################
### Constraints ###
###################

for n in N:
    # Number of time periods for which a node should reduce demand per day
    m.addConstr(quicksum(R[n,t] for t in T) == Num_Reduce_Period)

# restrict the number of extra-capacity transmission lines
m.addConstr(quicksum(I[a] for a in A) == Num_Inc_Lines)

# Total number of time periods where the gas generator is operational
m.addConstr(quicksum(P[t] for t in T) == New_Periods)

# Exclude building new generator at the declined node
m.addConstr(N_G[Declined_node] == 0)

# Total number of new gas generator(s)
m.addConstr(quicksum(N_G[n] for n in N if n not in supply) == Num_New_Generator)

# Total number of solar farm(s)
m.addConstr(quicksum(S[n] for n in N) == Num_Solar_Farm)

for t in T:
    
    # Maximum number of nodes to reduce demand in one time period 
    m.addConstr(quicksum(R[n,t] for n in N) <= Num_Reduce_Node)
    
    for a in A:
        if not a in highs:
            # Capacity of lines with additional capacity if applicable
            m.addConstr(Y[a,t] <= lowlimit + Extra_Arc_Cap*I[a])

    for n in N:
        # Balancing the power flow at each node and in each time period
        m.addConstr(quicksum(Y[a,t]*(1-loss*distance[a]) for a in A 
                    if arcs['Node2'][a] == n) + X[n,t] + Z[n,t]  + E[n,t] ==
                    quicksum(Y[a,t] for a in A if arcs['Node1'][a] == n) 
                    + D[n][t]*(1-R[n,t]*Reduced_demand))
        
        # Power generated by the solar farm at node n and in time period t
        m.addConstr(Z[n,t] <= S[n]*Supply_SF[t])
        
        if n in supply:
            # Power generated by existing generators under threshold
            m.addConstr(X[n,t] <= supply[n]*Cap_Threshold)
            
            # Power generated by existing generators beyond the threshold
            m.addConstr(E[n,t] <= O[n,t]*supply[n]*(1-Cap_Threshold))
            
        else: 
            # Capacity of new gas generator at node n
            m.addConstr(X[n,t] <= N_G[n]*New_Capacity)
            
            # Capacity of new gas generator in time period t
            m.addConstr(X[n,t] <= P[t] * New_Capacity)
                        
            # Threshold is not applicable to non-generator nodes
            m.addConstr(O[n,t] == 0)
            m.addConstr(E[n,t] == 0)
            
#################
### Run model ###
#################

m.optimize()

#################
### Analytics ###
#################

print('Nodes that experienced reduced demand in each period:')
for t in T:
    for n in N:
        if R[n,t].x > 0.9:
            print('period',t,': node',n)

print('\n Generation profiles for all generators including solar farm')
for n in N:
    for t in T:
        if n in supply:
            print('node',n,': period',t,': under threshold =', X[n,t].x, ': over threshold =',E[n,t].x)
        elif N_G[n].x >0.9:
            print('new node',n,': period',t, ':', X[n,t].x)
        elif S[n].x >0.9:
            print('solar node',n,': period',t, ':', Z[n,t].x)
    
print('\n Selected placement of high capacity arcs')
for a in A: 
    for t in T:
        if I[a].x > 0.9:
            print('arc',a, ': period',t, ': ',Y[a,t].x)

